---
import {
    btn_success,
    btn_warning,
    btn_danger
} from '../assets/classconst';
---

<!-- Toda la estructura HTML va aquí -->
<div id="app-container" class="relative h-full max-h-[700px] border-2 border-gray-600 rounded-lg shadow-lg bg-gray-700 m-2">
    <canvas id="canvas" class="h-full block"></canvas>

    <div class="absolute top-4 left-4 bg-gray-900 bg-opacity-70 p-4 rounded-lg shadow-xl space-y-3">
        <h2 class="text-lg font-bold border-b border-gray-500 pb-2 mb-2">Controles</h2>
        
        <div>
            <p class="font-semibold mb-2">Cambiar Modelo:</p>
            <div class="flex space-x-2">
                <button id="btn-shizuku" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200 disabled:bg-gray-500 disabled:cursor-not-allowed">Shizuku (v2)</button>
                <button id="btn-haru" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200 disabled:bg-gray-500 disabled:cursor-not-allowed">Haru (v4)</button>
            </div>
        </div>
        
        <div>
            <p class="font-semibold mb-2">Probar Reacciones:</p>
            <div class="flex space-x-2">
                <button id="btn-expression" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200 disabled:bg-gray-500 disabled:cursor-not-allowed">Expresión</button>
                <button id="btn-motion" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200 disabled:bg-gray-500 disabled:cursor-not-allowed">Movimiento</button>
            </div>
        </div>
        <p id="loading-text" class="text-yellow-400 font-bold hidden">Cargando modelo...</p>
    </div>
    <div class={btn_success + " absolute top-4 right-4"} id="ws_status">
      Connected
    </div>
</div>


<!-- 
    ====== ESTA LÍNEA ES LA SOLUCIÓN DEFINITIVA ======
    Asegúrate de que la ruta 'src' sea correcta.
    Apunta desde 'components' hacia 'scripts'.
-->
<script>
  import './live2d-handler.ts';
import { WsConnectionManager } from '../lib/WsConnectionManager';
import type { ConnectionState, Message } from '../lib/types';
import { emitter } from '../lib/Emitter';
import { type ProvidersMap,AudioQueue } from '../lib/audio/audio_queue';
import { WebSocketAudioProvider } from '../lib/audio/providers';
import { speakWithLipSync, stopLipSyncAudio } from './live2d-handler'; 
import type { MessageEvent } from './types/ws_model'
const wsAudioProvider = new WebSocketAudioProvider();

// 2. Crear el mapa de proveedores para AudioQueue
const providers: ProvidersMap = {
  // Puedes tener otros proveedores aquí, como StreamElements, etc.
  // 'streamElements': { instance: new StreamElementsProvider(), initialized: false },
  
  // Añade tu nuevo proveedor con un nombre único
  'websocketAudio': { instance: wsAudioProvider, initialized: true }
};

// 3. Crear la instancia de AudioQueue
const audioQueue = new AudioQueue(providers, { mode: 'archive' });
// 1. new Class
const wsManager = new WsConnectionManager();
const template = (text: string, type: string = 'text-input'): {
  type: string;
  text: string;
  images: string[];
} => {
  return {
    type,
    text,
    images: []
  }
}
// 2.Listeners
wsManager.on('connectionStatusChange', (state: ConnectionState) => {
  console.log(`[MANAGER] Estado de '${state.id}' cambió a: ${state.status}`);
});

wsManager.on('message', (data: { connectionId: string; message: Message }) => {
  console.log(`[MANAGER] Mensaje recibido en '${data.connectionId}':`, data.message.data);
});

wsManager.on('connectionCreated', (state: ConnectionState) => {
    console.log(`[MANAGER] Conexión '${state.name}' (${state.id}) ha sido creada.`);
});

// 3. Crear múltiples conexiones
// Usaremos un servicio de echo público para las pruebas.
const wsExampel = "ws://127.0.0.1:12393/client-ws"
// Conexión 1: Echo Básico
const onError = (...args:any) => {
  console.log('CALLBACK:', ...args);
  changeStateIndicator('disconnected')
}
const onConnect = (data: any) => {
    console.log("onConnect",data);
    changeStateIndicator('connected')
}
const onMessages = (data: Message) => {
  if (!data || !data.data) return;
  console.log("onMessages",data)
  console.log("data.type",data.data)
  const messageData = data.data;
  const {type} = messageData as MessageEvent;
  if (type === 'audio') {
      audioQueue.enqueue(
      messageData.audio,         // El string base64 va aquí
      'websocketAudio',          // El nombre de nuestro nuevo provider
      {                          // Opciones adicionales que podrías usar en el futuro
        messageData
      },
      false // Opcional: `true` para interrumpir y reproducir ya, `false` para encolar.
    ).then(audioId => {
      console.log(`Audio con ID ${audioId} ha sido encolado/reproducido.`);
    }).catch(error => {
      console.error("Error al encolar el audio desde WebSocket:", error);
    });
  }
}
wsManager.createConnection({
  id: 'ws_api',
  name: 'Echo Server Básico',
  url: wsExampel, // Un servidor de echo público y confiable
  onOpen: onConnect,
  onMessage: onMessages,
  onClose: onError,
});
//wsManager.connect('ws_api');
const ws_api = wsManager.getConnection('ws_api');
emitter.on('send:text-input', (data: string) => {
  const templateData = template(data);
  if (!ws_api) return;
  ws_api.send(templateData);
})

//console.log("ws_api",ws_api)


/*
{"type": 'text-input',"text": 'de que tamaño crees que es el universo?',"images": []}
{"type":"add-client-to-group","invitee_uid":"571495c2-8dcb-4a74-8979-d6ad51dece1a"}
*/

/*
const sendMessage = wsManager.send('ws_api', template('de que tamaño crees que es el universo?'));
console.log("sendMessage",sendMessage)
*/

/* 
wsManager.connect('echo-2'); 
{"type":"text-input","text":"COMO ESTAS","images":[]}
*/
async function initializeConnection(){
    const button_connect = document.getElementById('ws_status');
    //ws_api?.connect();//non return
    if (!button_connect) return;
    button_connect.addEventListener('click', () => {
        ws_api?.connect();
    })
}
async function changeStateIndicator(text:string){
    const button_connect = document.getElementById('ws_status') as HTMLButtonElement
    if (typeof text !== 'string' || !button_connect) return;
    button_connect.textContent = text
}
document.addEventListener('DOMContentLoaded', initializeConnection);
</script>
