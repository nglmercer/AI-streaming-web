---
import {
    btn_success,
    btn_warning,
    btn_danger,
    btn_Info
} from '../assets/classconst';
import Subtitles from './Subtitles.astro';
import DraggableDialog from './dialog/DraggableDialog.astro';
---

<!-- Toda la estructura HTML va aquí -->
<div id="app-container" class="flex justify-center relative h-full border-2 border-gray-600 rounded-lg shadow-lg m-2">
    <canvas id="canvas" class="h-full block aspect-auto"></canvas>
    <DraggableDialog title="Controles">
        
        <div>
            <p class="font-semibold mb-2">Cambiar Modelo:</p>
            <div class="flex space-x-2">
                <button id="btn-shizuku" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200 disabled:bg-gray-500 disabled:cursor-not-allowed">Shizuku (v2)</button>
                <button id="btn-haru" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200 disabled:bg-gray-500 disabled:cursor-not-allowed">Haru (v4)</button>
            </div>
        </div>
        
        <div>
            <p class="font-semibold mb-2">Probar Reacciones:</p>
            <div class="flex space-x-2">
                <button id="btn-expression" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200 disabled:bg-gray-500 disabled:cursor-not-allowed">Expresión</button>
                <button id="btn-motion" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200 disabled:bg-gray-500 disabled:cursor-not-allowed">Movimiento</button>
            </div>
        </div>
        <p id="loading-text" class="text-yellow-400 font-bold hidden">Cargando modelo...</p>
    </DraggableDialog>
    <div class="absolute top-0 right-0 left-0 bottom-0 pointer-events-none">
      <Subtitles  />
    </div>
    <div class={btn_Info + " absolute top-4 right-4"} id="ws_status">
      Connect?
    </div>
</div>


<!-- 
    ====== ESTA LÍNEA ES LA SOLUCIÓN DEFINITIVA ======
    Asegúrate de que la ruta 'src' sea correcta.
    Apunta desde 'components' hacia 'scripts'.
-->
<script>
  import './live2d-handler.ts';
import { WsConnectionManager } from '../lib/WsConnectionManager';
import type { ConnectionState, Message } from '../lib/types';
import { emitter } from '@utils/Emitter';
import { type ProvidersMap,AudioQueue } from '../lib/audio/audio_queue';
import { WebSocketAudioProvider } from '../lib/audio/providers';
import type { MessageEvent,RemovedValue } from './types/ws_model';
import { triggerRandomExpression, triggerRandomMotion } from './live2d-handler.ts';
const wsAudioProvider = new WebSocketAudioProvider();
// 2. Crear el mapa de proveedores para AudioQueue
const providers: ProvidersMap = {
  // Puedes tener otros proveedores aquí, como StreamElements, etc.
  // 'streamElements': { instance: new StreamElementsProvider(), initialized: false },
  
  // Añade tu nuevo proveedor con un nombre único
  'websocketAudio': { instance: wsAudioProvider, initialized: true }
};
//emitter.emit('subtitles:show', { text: '¡Hola! Este es un <b>subtítulo</b> permanente.' });
// 3. Crear la instancia de AudioQueue
const audioQueue = new AudioQueue(providers, { mode: 'archive' });
// 1. new Class
const wsManager = new WsConnectionManager();
const template = (text: string, type: string = 'text-input'): {
  type: string;
  text: string;
  images: string[];
} => {
  return {
    type,
    text,
    images: []
  }
}
// 2.Listeners
wsManager.on('connectionStatusChange', (state: ConnectionState) => {
  console.log(`[MANAGER] Estado de '${state.id}' cambió a: ${state.status}`);
});

wsManager.on('message', (data: { connectionId: string; message: Message }) => {
  console.log(`[MANAGER] Mensaje recibido en '${data.connectionId}':`, data.message.data);
});

wsManager.on('connectionCreated', (state: ConnectionState) => {
    console.log(`[MANAGER] Conexión '${state.name}' (${state.id}) ha sido creada.`);
});

// 3. Crear múltiples conexiones
// Usaremos un servicio de echo público para las pruebas.
const wsExampel = "ws://127.0.0.1:12393/client-ws"
// Conexión 1: Echo Básico
const onError = (...args:any) => {
  console.log('CALLBACK:', ...args);
  changeStateIndicator('disconnected')
}
const onConnect = (data: any) => {
    console.log("onConnect",data);
    changeStateIndicator('connected')
}
const onMessages = (data: Message) => {
  if (!data || !data.data) return;
  console.log("data.data",data.data)
  const messageData = data.data;
  const {type} = messageData as MessageEvent;
  if (type === 'audio') {
    if (!messageData.audio) return;
      ModelActions(messageData.payload)
      audioQueue.enqueue(
      messageData.audio,         //base64
      'websocketAudio',         
      {                      
        messageData
      },
      false // `false` para encolar.
    ).then(audioId => {
      console.log(`Audio con ID ${audioId} ha sido encolado/reproducido.`);
    }).catch(error => {
      console.error("Error al encolar el audio desde WebSocket:", error);
    });
  }
  if (type === 'text-input' || type === 'full-text') {
    emitSubtittles(messageData.text)
  }
}
function ModelActions(actions:RemovedValue[]){
  if (actions && actions.length > 0) {
    console.log("actions",actions)
    actions.forEach((action) => {
      if (action.type === 'expression') {
        triggerRandomExpression(action.cleanValue);
      } else if (action.type === 'motion') {
        triggerRandomMotion(action.cleanValue);
      }
    });
  }
}
function emitSubtittles(text: string) {
    emitter.emit('subtitles:show', { text: text });
}
wsManager.createConnection({
  id: 'ws_api',
  name: 'Echo Server Básico',
  url: wsExampel, // Un servidor de echo público y confiable
  onOpen: onConnect,
  onMessage: onMessages,
  onClose: onError,
});
//wsManager.connect('ws_api');
const ws_api = wsManager.getConnection('ws_api');
emitter.on('send:text-input', (data: string) => {
  const templateData = template(data);
  if (!ws_api) return;
  ws_api.send(templateData);
})

//console.log("ws_api",ws_api)


/*
{"type": 'text-input',"text": 'de que tamaño crees que es el universo?',"images": []}
{"type":"add-client-to-group","invitee_uid":"571495c2-8dcb-4a74-8979-d6ad51dece1a"}
*/

/*
const sendMessage = wsManager.send('ws_api', template('de que tamaño crees que es el universo?'));
console.log("sendMessage",sendMessage)
*/

/* 
wsManager.connect('echo-2'); 
{"type":"text-input","text":"COMO ESTAS","images":[]}
*/
async function initializeConnection(){
    const button_connect = document.getElementById('ws_status');
    ws_api?.connect();//non return
    if (!button_connect) return;
    button_connect.addEventListener('click', () => {
        ws_api?.connect();
    })
}
async function changeStateIndicator(text: string) {
    const button_connect = document.getElementById('ws_status') as HTMLButtonElement;

    // 1. Validar que el botón y el texto existen
    if (!button_connect || typeof text !== 'string') {
        return;
    }

    // 2. Actualizar el texto del botón
    button_connect.textContent = text;

    // 3. Mapa de estados a clases de Tailwind
    //    Usamos claves en minúsculas para hacer la comparación más fiable.
    const colorMap: { [key: string]: string } = {
        'connected': 'bg-green-600',
        'disconnect': 'bg-red-600',
        'reconnecting': 'bg-blue-600' // Corregí 'reconnecti'
    };
    
    // 4. Lista de todas las clases de color que podríamos querer quitar
    const allClassesToRemove = Object.values(colorMap);
    // Si usas otras clases de color, añádelas aquí. Ej: ['bg-green-600', 'bg-red-600', ...]

    // 5. Limpiar clases de color anteriores para evitar conflictos
    //    Ej: que el botón no tenga 'bg-green-600' y 'bg-red-600' a la vez.
    button_connect.classList.remove(...allClassesToRemove);

    // 6. Encontrar y añadir la nueva clase de color
    const normalizedText = text.toLowerCase();
    const classToAdd = colorMap[normalizedText]; // Busca la clase usando el texto como clave

    if (classToAdd) {
        button_connect.classList.add(classToAdd);
    } else {
        // Opcional: Añadir una clase por defecto si el texto no coincide con ninguna clave
        button_connect.classList.add('bg-gray-400'); // Por ejemplo, un color neutro
    }
}
document.addEventListener('DOMContentLoaded', initializeConnection);
</script>
