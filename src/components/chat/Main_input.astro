---
import { btn_Info } from '../../assets/classconst'
export interface Props {
  label?: string;
}
const { label = 'idle' } = Astro.props;
const defaultBtn = "p-2 rounded-full text-slate-700 dark:text-slate-200 hover:bg-slate-200 dark:hover:bg-slate-700 transition"
---

<!-- src/components/ActionBar.astro -->
<div class="flex flex-col gap-2 p-3 rounded-xl bg-slate-100 dark:bg-slate-800 w-full">
  <!-- label -->
  <div class="flex items-center">
    <span class="text-xs font-semibold text-slate-500 dark:text-slate-400" id="status-label">{label}</span>
  </div>

  <!-- top buttons -->
  <div class="flex items-center gap-2">
    <button
      id="mic-toggle"
      aria-label="Start"
      class={defaultBtn}
    >
      <span class="material-symbols-outlined text-lg" id="mic-icon">mic_off</span>
    </button>
    <button
      aria-label="Raise hand"
      class={defaultBtn}
    >
      <span class="material-symbols-outlined text-xl">back_hand</span>
    </button>
  </div>

  <!-- file + Input row -->
  <form class="flex items-center gap-2" id="chat-form">
    <button
      aria-label="Attach file"
      class={defaultBtn}
    >
      <span class="material-symbols-outlined text-xl">attach_file</span>
    </button>
    <input
      type="text"
      placeholder="Type your message..."
      id="Input_text"
      class="flex-1 resize-none rounded-lg border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-900 px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
    />
    <button class={btn_Info} id="sendInput">
      <span class="material-symbols-outlined text-xl">send</span>
    </button>
  </form>
</div>

<script>
import { MicrophoneControllerVAD } from "./MicrophoneControllerVAD";
import { emitter } from "@lib/Emitter";
import { transcriptApi } from "@lib/fetch/fetchapi";
const micVad = new MicrophoneControllerVAD();

const micButton = document.getElementById("mic-toggle") as HTMLButtonElement;
micButton.addEventListener("click", () => {
  if (micVad.isRunning) {
    micVad.pause();
  } else {
    micVad.resume();
  }
});

emitter.on("vad:start", () => console.log("Turno de voz iniciado"));
emitter.on("vad:end", async (data:{ buffer: Float32Array, timestamp: number }) => {
  console.log("Turno de voz finalizado, buffer listo para IA", data);
  const result = await transcriptApi.transcribe({ type: "float32array", data: data.buffer }).then((res) => console.log(res));
  console.log("result", result);
});
</script>