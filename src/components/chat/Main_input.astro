---
import { btn_Info,info_lalbel } from '../../assets/classconst'
export interface Props {
  label?: string;
}
const { label = 'idle' } = Astro.props;
const defaultBtn = "p-2 rounded-full text-slate-700 dark:text-slate-200 hover:bg-slate-200 dark:hover:bg-slate-700 transition"
---

<!-- src/components/ActionBar.astro -->
<div class="grid grid-cols-[100px_minmax(900px,_1fr)] gap-2 p-3 rounded-xl bg-slate-100 dark:bg-slate-800 w-full">
  <div class="grid grid-cols-[1fr_auto] items-center gap-2">
    <div class={info_lalbel}>
      <span class="text-xs font-semibold text-slate-500 dark:text-slate-400" id="status-label">{label}</span>
    </div>

    <button
    id="mic-toggle"
    aria-label="Start"
    class={defaultBtn}
  >
  <span class="material-symbols-outlined text-lg" id="mic-icon">mic_off</span>
  </button>
  <button
    aria-label="Raise hand"
    class={defaultBtn}
  >
    <span class="material-symbols-outlined text-xl">back_hand</span>
  </button>
  <button
    aria-label="Attach file"
    class={defaultBtn}
  >
    <span class="material-symbols-outlined text-xl">attach_file</span>
  </button>
</div>
  <form class="flex items-center gap-2 w-full" id="chat-form">
    <input
      type="text"
      placeholder="Type your message..."
      id="Input_text"
      class="flex-1 resize-none rounded-lg border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-900 px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
    />
    <button class={btn_Info} id="sendInput">
      <span class="material-symbols-outlined text-xl">send</span>
    </button>
  </form>
</div>
<script>
  import { emitter } from "../../lib/Emitter";
import { MicrophoneControllerVAD } from "./MicrophoneControllerVAD";
import { transcriptApi } from "@lib/fetch/fetchapi";
    console.log("emitter","inited");
    function initializeForm() {
        const form = document.querySelector<HTMLFormElement>("#chat-form");
        const sendInput = document.querySelector<HTMLButtonElement>("#sendInput");
        console.log("form",form,"sendInput",sendInput);
        if (!form || !sendInput) return;
        sendInput.addEventListener("click", (e) => {
            sendTextMessage();
        })
        form.addEventListener("submit", (e) => {
            e.preventDefault();
            sendTextMessage();
        });
    }
    function sendTextMessage() {
            const Input = document.querySelector<HTMLInputElement>("#chat-form #Input_text");
            console.log("Input",Input);
            if (!Input) return;
            console.log(Input.value);
            emitter.emit("send:text-input", Input.value);
            Input.value = "";
    }
    document.addEventListener("DOMContentLoaded", initializeForm);


const micVad = new MicrophoneControllerVAD();

const micButton = document.getElementById("mic-toggle") as HTMLButtonElement;
micButton.addEventListener("click", () => {
  if (micVad.isRunning) {
    micVad.pause();
  } else {
    micVad.resume();
  }
});

emitter.on("vad:start", () => console.log("Turno de voz iniciado"));
emitter.on("vad:end", async (data:{ buffer: Float32Array, timestamp: number }) => {
  console.log("Turno de voz finalizado, buffer listo para IA", data);
  await transcriptApi.transcribe({ type: "float32array", data: data.buffer }).then((res) => {
    console.log("res",res);
    emitter.emit('send:text-input', res.transcript);
  });
});
</script>