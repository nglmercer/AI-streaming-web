---
// src/components/SettingsDrawer.astro
import Icon from './Icon.astro';
import FormField from './FormField.astro';
import SwitchControl from './SwitchControl.astro';
import SelectStatic from './SelectStatic.astro';
import SelectSimple from './SelectSimple.astro'
import NumberInput from './NumberInput.astro';
import TextInput from './TextInput.astro';
import { defaulConfig,langsOptions,Providers,stringOptions,Modelconfig,exactConfigdts,providerKeys,ConfigID  } from '@assets/defaultConfig';
const configFields = Object.entries(providerKeys).map(([provider, keyName]) => ({
  id: keyName,
  label: `${provider.charAt(0).toUpperCase()}${provider.slice(1)} API Key`,
  placeholder: `Ingresa tu ${provider} API key`,
  value: '', // Aquí puedes obtener el valor de alguna store/config
  keyName,
  provider
}));
import { select_visible } from '@assets/classconst';
const tabs = [
  { id: 'general', label: 'General' },
  { id: 'agent', label: 'Agent' },
  { id: 'live2d', label: 'Live2D' },
  { id: 'asr', label: 'ASR' },
  { id: 'tts', label: 'TTS' },
  { id: 'about', label: 'About' },
];

---
    <!-- Header -->
    <header class="flex items-center justify-between p-4 border-b border-gray-700">
      <h2 class="text-xl font-semibold">Settings</h2>
      <button class="p-1 rounded-full hover:bg-gray-700 transition-colors" aria-label="Close">
        <Icon name="close" />
      </button>
    </header>

    <!-- Body (con scroll) -->
    <main class="flex-grow p-4 overflow-y-auto">
      <!-- Sistema de Pestañas (Tabs) -->
      <div id="settings-tabs">
        <!-- Lista de botones de pestañas -->
        <div class="flex space-x-1 border-b border-gray-700 mb-4" role="tablist">
          {tabs.map((tab, index) => (
            <button
              role="tab"
              data-tab-target={`#${tab.id}`}
              class:list={[
                "px-4 py-2 text-sm font-medium border-b-2 transition-colors",
                "text-gray-400 border-transparent hover:text-white",
                "focus:outline-none focus:ring-2 focus:ring-blue-500",
                { 'active-tab': index === 0 }
              ]}
            >
              {tab.label}
            </button>
          ))}
        </div>

        <!-- Paneles de contenido de las pestañas -->
        <div class="space-y-6">
          <!-- Panel General -->
          <div id="general" role="tabpanel" class="tab-panel space-y-4">

          <TextInput type="text" value={defaulConfig.ws_url} id="ws_url" label="WebSocket URL"/>
          <TextInput type="url" value={defaulConfig.base_url} id="base_url" label="Base URL"/>
          <SelectStatic label="Language" id={ConfigID.LANG} options={langsOptions} label="Language" placeholder='Select Language'/>
          <SelectSimple label="model 2d" id={ConfigID.MODEL2D} placeholder='select your model'></SelectSimple>
          <SelectStatic label="AI provider" id={ConfigID.AI_PROVIDER} options={stringOptions(Providers.llm)} label="Model" placeholder='Select AI provider'/>
          <SelectSimple label="AI model" id={ConfigID.AI_MODEL} options={[]} label="Model" placeholder='Select AI model'/>

          <SelectSimple label="Background_img" id={ConfigID.BACKGROUND_IMG} placeholder='select your bg'></SelectSimple>
              {configFields.map(field => (
                <TextInput
                  label={field.label}
                  value={field.value}
                  id={field.keyName}
                  placeholder={field.placeholder}
                  type="password"
                />
              ))}
        </div>

          <!-- Panel Live2D -->
          <div id="live2d" role="tabpanel" class="tab-panel hidden space-y-2">

          </div>

          <!-- Panel ASR -->
          <div id="asr" role="tabpanel" class="tab-panel hidden space-y-2">
            <SwitchControl label="Auto Stop Mic When AI Start Speaking" checked={true} id='auto_stop_mic_when_ai_start_speaking'/>
            <SwitchControl label="Auto Start Mic When Conversation End" id='auto_start_mic_when_conversation_end'/>
            <SwitchControl label="Auto Start Mic When AI Interrupted" id='auto_start_mic_when_ai_interrupted'/>
            <NumberInput label="Speech Prob Threshold" value={50} id='speech_prob_threshold'/>
            <NumberInput label="Negative Speech Threshold" value={35} id='negative_speech_threshold'/>
            <NumberInput label="Redemption Frames" value={35} id='redemption_frames'/>
          </div>
          <!-- Panel Agent -->
          <div id="agent" role="tabpanel" class="tab-panel hidden space-y-2">
            <SwitchControl label="Allow Comment Task" id='comment_task' checked={true}/>
            <NumberInput label="Comment Timeout" value={5} id='comment_timeout'/>

<!--        <SwitchControl label="Allow AI to Speak Proactively" id='allow_ai_to_speak_proactively'/>
           <SwitchControl label="Prompt AI to Speak via Raise Hand Button" id='prompt_ai_to_speak_via_raise_hand_button'/>
 -->
              { Object.keys(exactConfigdts).map((key:string)=>(
               <TextInput 
                 type="text" 
                 label={key} 
                 id={key} 
                 placeholder={('prompt key'+key)} 
                 value={key in exactConfigdts ? exactConfigdts[key as keyof typeof exactConfigdts] : ''}
               ></TextInput>
               ))}
             
          </div>

          <!-- Panel TTS -->
          <div id="tts" role="tabpanel" class="tab-panel hidden">
            <p>TTS Settings Content</p>
          </div>


          <!-- Panel About -->
          <div id="about" role="tabpanel" class="tab-panel hidden">
            <p>About Settings Content</p>
          </div>
        </div>
      </div>
    </main>

    <!-- Footer -->
    <footer class="flex justify-end items-center p-4 border-t border-gray-700 space-x-3">
      <button class="px-4 py-2 rounded-md bg-gray-600 hover:bg-gray-500 transition-colors focus:outline-none focus:ring-2 focus:ring-gray-400">Cancel</button>
      <button class="px-4 py-2 rounded-md bg-blue-600 hover:bg-blue-500 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-400">Save</button>
    </footer>


<script>
  import { initializePersistentFormControls } from "./listeners/formPersistence";
  document.addEventListener('DOMContentLoaded', () => {
    initializePersistentFormControls()
    const tabContainer = document.getElementById('settings-tabs');
    if (!tabContainer) return;

    const tabButtons = tabContainer.querySelectorAll('[role="tab"]');
    const tabPanels = tabContainer.querySelectorAll('[role="tabpanel"]');

    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Desactivar todos los botones y paneles
        tabButtons.forEach(btn => btn.classList.remove('active-tab'));
        tabPanels.forEach(panel => panel.classList.add('hidden'));

        // Activar el botón clickeado
        button.classList.add('active-tab');

        // Mostrar el panel correspondiente
        const targetPanelId = button.getAttribute('data-tab-target');
        if (!targetPanelId) return;
        const targetPanel = document.querySelector(targetPanelId);
        if (targetPanel) {
          targetPanel.classList.remove('hidden');
        }
      });
    });
  });
</script>