---
// src/components/SelectControl.astro
import FormField from './FormField.astro';
import Icon from './Icon.astro';
interface Props {
  label: string;
  placeholder: string;
  options: { value: string; label: string }[];
  id: string;
  value?: string;
}
const { label, placeholder, options, id, value } = Astro.props;
---
<FormField {label}>
  <div class="relative">
    <select 
      id={id}
      class="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
    >
      <option value="" disabled>{placeholder}</option>
      {options.map(opt => (
        <option value={opt.value} selected={value === opt.value}>
          {opt.label}
        </option>
      ))}
    </select>
    <div class="bg-gray-700 border border-gray-600 rounded-md px-3 py-2 text-white flex items-center justify-between pointer-events-none">
      <span class="select-display">{value ? options.find(opt => opt.value === value)?.label || placeholder : placeholder}</span>
      <Icon name="expand_more" />
    </div>
  </div>
</FormField>

<script>
  import { DataStorage, LocalStorageAdapter } from "json-obj-manager";
  const ConfigData = new DataStorage<string>(new LocalStorageAdapter('config'));

  document.addEventListener('DOMContentLoaded', async () => {
    const selectInputs = document.querySelectorAll('select[id]');
    const alldata = await ConfigData.getAll();
    console.log("ConfigData", alldata);

    selectInputs.forEach(select => {
      const selectElement = select as HTMLSelectElement;
      const id = selectElement.getAttribute('id');
      if (id) {
        const storedValue = alldata[id];
        if (storedValue) {
          selectElement.value = storedValue;
          // Actualizar el display visual
          const displayElement = selectElement.parentElement?.querySelector('.select-display');
          const selectedOption = selectElement.options[selectElement.selectedIndex];
          if (displayElement && selectedOption) {
            displayElement.textContent = selectedOption.textContent;
          }
        }

        selectElement.addEventListener('change', (event) => {
          const target = event.target as HTMLSelectElement;
          console.log("select", target.value);
          if (!target) return;
          
          // Guardar en storage
          ConfigData.save(id, target.value);
          
          // Actualizar display visual
          const displayElement = target.parentElement?.querySelector('.select-display');
          const selectedOption = target.options[target.selectedIndex];
          if (displayElement && selectedOption) {
            displayElement.textContent = selectedOption.textContent;
          }
        });
      }
    });
  });
</script>